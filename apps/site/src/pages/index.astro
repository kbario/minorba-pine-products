---
import { Button } from '@minorba/ui/button';
import { Image } from 'astro:assets';
import mulchImg from '../assets/img/mulch.png';
import postsImg from '../assets/img/pine_rounds.png';
import { CopyButton } from '../components/copy-button';
import {
  FLAGS,
  isFeatureEnabled,
  type Feature,
} from '../constants/feature-flags';
import Layout from '../layouts/Layout.astro';
import Section from '../components/section.astro';
import { heroButtonGroup, heroImage, heroTextGroup } from '../constants/ids';
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from '@minorba/ui/card';
import CardList from '../components/card-list.astro';
import CardListItem from '../components/card-list-item.astro';

const IMAGE_WIDTH = 300;

const links = [
  {
    display: 'See our products',
    link: '#our-products-section',
    // flag: FEATURES.ProductsPage,
  },
  {
    display: 'Contact us',
    link: '#contact-section',
    // flag: FEATURES.ContactPage,
  },
] satisfies { display: string; link: string; flag?: Feature }[] as {
  display: string;
  link: string;
  flag?: Feature;
}[];

const products = [
  {
    title: 'Strainer Posts',
    desc: 'Strong enough to hold any distance of fencing.',
    img: '',
  },
  {
    title: 'Fence Posts',
    desc: 'Ranging in size, suitable for everything from hobby farms to stations.',
    img: '',
  },
  {
    title: 'Horse Jump Rails',
    desc: 'Milled to be perfectly cylindrical along their entire length with a smooth finish.',
    img: '',
  },
  {
    title: 'Sheep and Cattle Yard Posts',
    desc: 'With a flat cut on one side, these posts are perfect for keeping even the stubbonest of animals at bay.',
    img: '',
  },
  {
    title: 'Pointed Posts',
    desc: 'Milled to add extra lodgement of your posts in the ground.',
    img: '',
  },
];
const solutions = [
  {
    title: 'Boundary fences',
    desc: 'Secure your property with high quality fence posts treated to last as long as you.',
    img: '',
  },
  {
    title: 'Horse Arenas',
    desc: 'Beautifully crafted jump rails and boundary posts fitting for the most prestigious arenas.',
    img: '',
  },
  {
    title: 'Cattle and Sheep Yards',
    desc: 'Build a strong and sturdy yard for any size animal.',
    img: '',
  },
];
---

<Layout>
  <Section id='hero-section'>
    <div
      class='flex max-w-xl flex-col items-center justify-center gap-6 text-center lg:max-w-4xl lg:flex-row lg:gap-8'>
      <Image
        id={heroImage}
        src={postsImg}
        width={500}
        alt='pack of pine posts'
        class='max-w-sm rounded-lg shadow-lg'
      />
      <div class='flex flex-col items-center gap-6'>
        <div
          id={heroTextGroup}
          class='flex flex-col items-center gap-4'>
          <h1>The best pine posts.</h1>
          <p>
            We service WA with the highest quality pine rounds. What ever
            fencing project you have, we can help you.
          </p>
        </div>
        <ul
          id={heroButtonGroup}
          class='flex gap-2'>
          {
            links
              .filter((l) => isFeatureEnabled(l.flag))
              .map((l, i) => (
                <li>
                  <Button
                    appearance={!i ? 'primary' : 'secondary'}
                    as={'a'}
                    href={l.link}>
                    {l.display}
                  </Button>
                </li>
              ))
          }
        </ul>
      </div>
    </div>
  </Section>
  <Section
    id='solutions-section'
    background='secondary'>
    <h2>Solutions</h2>
    <CardList>
      {
        solutions.map((s) => {
          return (
            <CardListItem>
              <Card class='grow'>
                <CardHeader>
                  <CardTitle>{s.title}</CardTitle>
                  {s.desc && <CardDescription>{s.desc}</CardDescription>}
                </CardHeader>
                <CardContent />
                <CardFooter>
                  {isFeatureEnabled(FLAGS.Features.Ordering) && (
                    <Button
                      appearance='primary'
                      class=''>
                      Order Now
                    </Button>
                  )}
                  {isFeatureEnabled(FLAGS.Features.Pricelist) && (
                    <Button class=''>See Prices</Button>
                  )}
                </CardFooter>
              </Card>
            </CardListItem>
          );
        })
      }
    </CardList>
  </Section>

  <Section id='our-products-section'>
    <h2>Our Products</h2>
    <CardList>
      {
        products.map((p) => {
          return (
            <CardListItem>
              <Card class='grow'>
                <CardHeader>
                  <CardTitle>{p.title}</CardTitle>
                  {p.desc && <CardDescription>{p.desc}</CardDescription>}
                </CardHeader>
                <CardContent />
                <CardFooter>
                  {isFeatureEnabled(FLAGS.Features.Ordering) && (
                    <Button
                      appearance='primary'
                      class=''>
                      Order Now
                    </Button>
                  )}
                  {isFeatureEnabled(FLAGS.Features.Pricelist) && (
                    <Button class=''>See Prices</Button>
                  )}
                </CardFooter>
              </Card>
            </CardListItem>
          );
        })
      }
    </CardList>

    <!-- <Button
      appearance='primary'
      as={'a'}
      href={'#contact-section'}>
      Enquire now
    </Button> -->
  </Section>

  <Section
    id='home-map-section'
    background='secondary'>
    <h2>Get directions:</h2>
    <i>Look for the big blue sign on Albany highway</i>
    <Button
      as='a'
      appearance={'primary'}
      href='https://www.google.com/maps/dir//Minorba+Pine+Products+33007+Albany+Hwy+Narrikup+WA+6326/@-34.7215654,117.7016359,16z/data=!4m8!4m7!1m0!1m5!1m1!1s0x2a390939f428a539:0x82f8231deb19a3a2!2m2!1d117.7016359!2d-34.7215654?entry=ttu&g_ep=EgoyMDI1MDEwOC4wIKXMDSoASAFQAw%3D%3D'
      target='_blank'>
      Launch google maps now!
    </Button>
    <div class='h-[450px] w-full max-w-[600px] rounded p-2 shadow-md'>
      <iframe
        src='https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3279.3504067074864!2d117.69676499026464!3d-34.72156089387746!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x2a390939f428a539%3A0x82f8231deb19a3a2!2sMinorba%20Pine%20Products!5e0!3m2!1sen!2sau!4v1736653474638!5m2!1sen!2sau'
        style='border:0; width: 100%; height: 100%;'
        allowfullscreen=''
        loading='lazy'
        referrerpolicy='no-referrer-when-downgrade'
      ></iframe>
    </div>
  </Section>

  <Section id='contact-section'>
    <h2>Contact us</h2>
    <p class='max-w-xl text-center'>
      Whether it is to get a quote, place an order, or just see what we're up
      to, we'd love to hear from you!
    </p>
    <ul class='flex flex-col items-center gap-4'>
      {
        [
          {
            display: 'Call',
            link: 'tel:0448891260',
            infoType: 'phone number',
          },
          {
            display: 'Email',
            link: 'mailto:minorba1@bigpond.com',
            infoType: 'address',
          },
        ].map((l, i) => (
          <li class='flex items-center gap-4'>
            {!!l.link ? (
              <>
                <Button
                  as='a'
                  appearance={'primary'}
                  href={l.link}>
                  {l.display} now
                </Button>
                {!!l.link.split(':')[1] ? (
                  <>
                    <span>or</span>
                    <CopyButton
                      client:only='solid'
                      textToCopy={l.link.split(':')[1]}
                      content='copied'>
                      copy our {l.infoType}
                    </CopyButton>
                  </>
                ) : (
                  ''
                )}
              </>
            ) : (
              l.display
            )}
          </li>
        ))
      }
    </ul>
  </Section>
</Layout>
<script>
  import { heroButtonGroup } from '../constants/ids';

  document.addEventListener('DOMContentLoaded', () => {
    const buttonGroup = document.getElementById(heroButtonGroup);
    if (!buttonGroup) return;

    // Create the animation with keyframes
    const animation = buttonGroup.animate(
      [
        // Initial state (opacity: 0, scale: 0)
        { opacity: 0, transform: 'scale(0.95) translateY(40%)' },
        // Final state (opacity: 1, scale: 1)
        { opacity: 1, transform: 'scale(1) translateY(0)' },
      ],
      {
        // Animation options
        duration: 750, // 0.4 seconds
        easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)', // Approximation of spring with bounce: 0.5
        fill: 'forwards', // Keep the final state
      }
    );

    // Make sure the ball stays visible after animation completes
    animation.onfinish = () => {
      buttonGroup.style.opacity = '1';
      buttonGroup.style.transform = 'scale(1)';
    };
  });
</script>
<script>
  import { heroTextGroup } from '../constants/ids';

  document.addEventListener('DOMContentLoaded', () => {
    const textGroup = document.getElementById(heroTextGroup);
    if (!textGroup) return;

    // Create the animation with keyframes
    const animation = textGroup.animate(
      [
        // Initial state (opacity: 0, scale: 0)
        { opacity: 0, transform: 'scale(0.95) translateY(-20%)' },
        // Final state (opacity: 1, scale: 1)
        { opacity: 1, transform: 'scale(1) translateY(0)' },
      ],
      {
        // Animation options
        duration: 750, // 0.4 seconds
        easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)', // Approximation of spring with bounce: 0.5
        fill: 'forwards', // Keep the final state
      }
    );

    // Make sure the ball stays visible after animation completes
    animation.onfinish = () => {
      textGroup.style.opacity = '1';
      textGroup.style.transform = 'scale(1)';
    };
  });
</script>
<script>
  import { heroImage } from '../constants/ids';

  document.addEventListener('DOMContentLoaded', () => {
    const textGroup = document.getElementById(heroImage);
    if (!textGroup) return;

    // Create the animation with keyframes
    const animation = textGroup.animate(
      [
        // Initial state (opacity: 0, scale: 0)
        { opacity: 0, transform: 'scale(0.95) translateY(-20%)' },
        // Final state (opacity: 1, scale: 1)
        { opacity: 1, transform: 'scale(1) translateY(0)' },
      ],
      {
        // Animation options
        duration: 750, // 0.4 seconds
        easing: 'cubic-bezier(0.34, 1.56, 0.64, 1)', // Approximation of spring with bounce: 0.5
        fill: 'forwards', // Keep the final state
      }
    );

    // Make sure the ball stays visible after animation completes
    animation.onfinish = () => {
      textGroup.style.opacity = '1';
      textGroup.style.transform = 'scale(1)';
    };
  });
</script>
<!-- <script>
  import { heroImage } from '../constants/ids';

  document.addEventListener('DOMContentLoaded', () => {
    const img = document.getElementById(heroImage);
    if (!img) return;
    let isFollowing = false;
    let animationId: number | null = null;

    // Function to update rotation based on time
    function updateTimeBasedRotation() {
      if (!isFollowing && img) {
        const now = Date.now() / 1000;
        // Complete cycle every 10 seconds
        const angle = ((now % 10) / 10) * Math.PI * 2;

        // Create a gentle rotation pattern
        const rotationX = Math.sin(angle) * 5;
        const rotationY = Math.cos(angle) * 5;

        img.style.transform = `perspective(1000px) rotateX(${rotationX}deg) rotateY(${rotationY}deg)`;
      }

      animationId = requestAnimationFrame(updateTimeBasedRotation);
    }

    // Start the time-based rotation
    animationId = requestAnimationFrame(updateTimeBasedRotation);

    // Handle mouse movement
    document.addEventListener('mousemove', (e) => {
      const rect = img.getBoundingClientRect();
      const divCenterX = rect.left + rect.width / 2;
      const divCenterY = rect.top + rect.height / 2;

      const distanceX = e.clientX - divCenterX;
      const distanceY = e.clientY - divCenterY;
      const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY);

      // Check if cursor is within 100px
      if (distance < Math.max(rect.width, rect.height) + 100) {
        isFollowing = true;

        // Calculate rotation based on cursor position
        // Limit rotation to a small amount (max 10 degrees)
        const rotationY = Math.min(Math.max((distanceX / 100) * 10, -10), 10);
        const rotationX = Math.min(Math.max(-(distanceY / 100) * 10, -10), 10);

        img.style.transform = `perspective(1000px) rotateX(${rotationX}deg) rotateY(${rotationY}deg)`;
      } else {
        isFollowing = false;
      }
    });

    // Clean up animation when page is unloaded
    window.addEventListener('beforeunload', () => {
      if (animationId) {
        cancelAnimationFrame(animationId);
      }
    });
  });
</script> -->
